alloy:
  clustering:
    enabled: true
  configMap:
    content: |-
      logging {
        level = "info"
        format = "logfmt"
      }
      discovery.kubernetes "pods" {
        role = "pod"
      }
      discovery.kubernetes "nodes" {
        role = "node"
      }
      discovery.relabel "metrics" {
        targets = discovery.kubernetes.pods.targets
        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_port"]
          target_label  = "__meta_kubernetes_pod_container_port_number"
          action = "keepequal"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_container_port_number"]
          regex = ""
          action = "drop"
        }    
        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_path",]
          target_label  = "__metrics_path__"
          separator = ""
          action = "replace"
        }        
      }
      prometheus.scrape "metrics" {
        clustering {
            enabled = true
        }
        targets    = discovery.relabel.metrics.output
        forward_to = [prometheus.remote_write.metrics.receiver]
        scrape_interval = "30s"
      }
      discovery.relabel "pods_metrics" {
        targets = discovery.kubernetes.nodes.targets
        rule {
          replacement  = "kubernetes.default.svc:443"
          target_label = "__address__"
        }
        rule {
          regex         = "(.+)"
          replacement   = "/api/v1/nodes/$1/proxy/metrics/cadvisor"
          source_labels = ["__meta_kubernetes_node_name"]
          target_label  = "__metrics_path__"
        }
      }
      prometheus.scrape "pods_metrics" {
        clustering {
            enabled = true
        }
        targets      = discovery.relabel.pods_metrics.output
        job_name     = "integrations/kubernetes/kubelet"
        scheme       = "https"
        honor_labels = true
        forward_to = [prometheus.remote_write.metrics.receiver]
        bearer_token_file = "/run/secrets/kubernetes.io/serviceaccount/token"
        tls_config {
          insecure_skip_verify = true
          server_name          = "kubernetes"
        }
        scrape_interval = "30s"
      }
      prometheus.exporter.unix "os_metrics" { }
      prometheus.scrape "os_metrics" {
        clustering {
            enabled = true
        }
        targets    = prometheus.exporter.unix.os_metrics.targets
        forward_to = [prometheus.remote_write.metrics.receiver]
        scrape_interval = "30s"
      }
      prometheus.remote_write "metrics" {
        endpoint {
          url = "http://mimir-nginx/api/v1/push"
        }
      }